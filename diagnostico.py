#!/usr/bin/env python3
"""
Script de diagn√≥stico para el Sistema de B√°scula Acad√©mica
Verifica que todos los componentes est√©n correctamente instalados
"""

import sys
import os
import sqlite3
import importlib
import platform
from datetime import datetime

def print_header():
    """Imprime el encabezado del diagn√≥stico"""
    print("=" * 60)
    print("   DIAGN√ìSTICO DEL SISTEMA DE B√ÅSCULA ACAD√âMICA")
    print("=" * 60)
    print(f"Fecha: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"Sistema Operativo: {platform.system()} {platform.release()}")
    print(f"Arquitectura: {platform.machine()}")
    print("-" * 60)

def verificar_python():
    """Verifica la versi√≥n de Python"""
    print("1. VERIFICACI√ìN DE PYTHON")
    print(f"   Versi√≥n: {sys.version}")
    print(f"   Ejecutable: {sys.executable}")
    
    if sys.version_info >= (3, 7):
        print("   ‚úì Versi√≥n de Python compatible (3.7+)")
        return True
    else:
        print("   ‚úó Versi√≥n de Python incompatible (necesita 3.7+)")
        return False

def verificar_modulos():
    """Verifica que todos los m√≥dulos requeridos est√©n instalados"""
    print("\n2. VERIFICACI√ìN DE M√ìDULOS")
    
    modulos_requeridos = {
        'streamlit': 'Framework web principal',
        'plotly': 'Gr√°ficas interactivas',
        'pandas': 'Manipulaci√≥n de datos',
        'sqlite3': 'Base de datos (incluido en Python)',
        'random': 'Generaci√≥n de n√∫meros aleatorios (incluido)',
        'datetime': 'Manejo de fechas (incluido)',
        're': 'Expresiones regulares (incluido)'
    }
    
    modulos_ok = True
    
    for modulo, descripcion in modulos_requeridos.items():
        try:
            mod = importlib.import_module(modulo)
            version = getattr(mod, '__version__', 'N/A')
            print(f"   ‚úì {modulo:<12} - {descripcion} (v{version})")
        except ImportError:
            print(f"   ‚úó {modulo:<12} - {descripcion} (NO INSTALADO)")
            modulos_ok = False
        except Exception as e:
            print(f"   ‚ö† {modulo:<12} - {descripcion} (ERROR: {e})")
            modulos_ok = False
    
    return modulos_ok

def verificar_archivos():
    """Verifica que todos los archivos necesarios est√©n presentes"""
    print("\n3. VERIFICACI√ìN DE ARCHIVOS")
    
    archivos_requeridos = {
        'app.py': 'Aplicaci√≥n principal',
        'requirements.txt': 'Lista de dependencias',
        'README.md': 'Documentaci√≥n principal',
        'ARQUITECTURA.md': 'Documentaci√≥n de arquitectura',
        'GUIA_INSTALACION.md': 'Gu√≠a de instalaci√≥n',
        'GUIA_RESOLUCION_PROBLEMAS.md': 'Gu√≠a de troubleshooting'
    }
    
    archivos_ok = True
    
    for archivo, descripcion in archivos_requeridos.items():
        if os.path.exists(archivo):
            size = os.path.getsize(archivo)
            print(f"   ‚úì {archivo:<30} - {descripcion} ({size} bytes)")
        else:
            print(f"   ‚úó {archivo:<30} - {descripcion} (NO ENCONTRADO)")
            archivos_ok = False
    
    return archivos_ok

def verificar_base_datos():
    """Verifica la funcionalidad de SQLite"""
    print("\n4. VERIFICACI√ìN DE BASE DE DATOS")
    
    try:
        # Crear conexi√≥n de prueba en memoria
        conn = sqlite3.connect(':memory:')
        cursor = conn.cursor()
        
        # Crear tabla de prueba
        cursor.execute('''
            CREATE TABLE test_table (
                id INTEGER PRIMARY KEY,
                nombre TEXT,
                valor REAL
            )
        ''')
        
        # Insertar datos de prueba
        cursor.execute("INSERT INTO test_table (nombre, valor) VALUES (?, ?)", 
                      ("test", 123.45))
        
        # Consultar datos
        cursor.execute("SELECT * FROM test_table")
        resultado = cursor.fetchone()
        
        conn.close()
        
        if resultado:
            print("   ‚úì SQLite funcionando correctamente")
            print(f"   ‚úì Datos de prueba: {resultado}")
            return True
        else:
            print("   ‚úó Error en consulta de datos")
            return False
            
    except Exception as e:
        print(f"   ‚úó Error en SQLite: {e}")
        return False

def verificar_permisos():
    """Verifica permisos de escritura en el directorio actual"""
    print("\n5. VERIFICACI√ìN DE PERMISOS")
    
    try:
        # Intentar crear archivo de prueba
        test_file = 'test_permisos.tmp'
        with open(test_file, 'w') as f:
            f.write("test")
        
        # Intentar leer el archivo
        with open(test_file, 'r') as f:
            content = f.read()
        
        # Eliminar archivo de prueba
        os.remove(test_file)
        
        if content == "test":
            print("   ‚úì Permisos de lectura/escritura correctos")
            return True
        else:
            print("   ‚úó Error en permisos de lectura")
            return False
            
    except Exception as e:
        print(f"   ‚úó Error de permisos: {e}")
        return False

def verificar_red():
    """Verifica conectividad de red (opcional)"""
    print("\n6. VERIFICACI√ìN DE RED")
    
    try:
        import urllib.request
        
        # Intentar conectar a un sitio web
        urllib.request.urlopen('https://www.google.com', timeout=5)
        print("   ‚úì Conectividad a internet disponible")
        return True
        
    except Exception as e:
        print(f"   ‚ö† Sin conectividad a internet: {e}")
        print("   ‚Ñπ La aplicaci√≥n puede funcionar sin internet")
        return True  # No es cr√≠tico

def generar_reporte():
    """Genera un reporte de diagn√≥stico"""
    print("\n7. GENERANDO REPORTE")
    
    try:
        reporte = f"""
REPORTE DE DIAGN√ìSTICO - SISTEMA DE B√ÅSCULA ACAD√âMICA
=====================================================
Fecha: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
Sistema: {platform.system()} {platform.release()}
Python: {sys.version}
Directorio: {os.getcwd()}

ESTADO DE COMPONENTES:
- Python: {'‚úì' if sys.version_info >= (3, 7) else '‚úó'}
- M√≥dulos: Verificar salida anterior
- Archivos: Verificar salida anterior
- Base de datos: Verificar salida anterior
- Permisos: Verificar salida anterior

RECOMENDACIONES:
- Si hay m√≥dulos faltantes, ejecutar: pip install -r requirements.txt
- Si hay errores de permisos, verificar ubicaci√≥n del proyecto
- Para soporte, consultar GUIA_RESOLUCION_PROBLEMAS.md
"""
        
        with open('diagnostico_reporte.txt', 'w', encoding='utf-8') as f:
            f.write(reporte)
        
        print("   ‚úì Reporte guardado en 'diagnostico_reporte.txt'")
        return True
        
    except Exception as e:
        print(f"   ‚úó Error generando reporte: {e}")
        return False

def main():
    """Funci√≥n principal del diagn√≥stico"""
    print_header()
    
    # Ejecutar todas las verificaciones
    resultados = []
    resultados.append(verificar_python())
    resultados.append(verificar_modulos())
    resultados.append(verificar_archivos())
    resultados.append(verificar_base_datos())
    resultados.append(verificar_permisos())
    resultados.append(verificar_red())
    
    # Generar reporte
    generar_reporte()
    
    # Resumen final
    print("\n" + "=" * 60)
    print("   RESUMEN DEL DIAGN√ìSTICO")
    print("=" * 60)
    
    exitosos = sum(resultados)
    total = len(resultados)
    
    if exitosos == total:
        print("üéâ ¬°DIAGN√ìSTICO EXITOSO!")
        print("   Todos los componentes est√°n funcionando correctamente.")
        print("   Puede ejecutar la aplicaci√≥n con: streamlit run app.py")
    elif exitosos >= total - 1:
        print("‚ö†Ô∏è  DIAGN√ìSTICO CON ADVERTENCIAS")
        print("   La mayor√≠a de componentes est√°n funcionando.")
        print("   Revisar los elementos marcados con ‚úó arriba.")
    else:
        print("‚ùå DIAGN√ìSTICO FALLIDO")
        print("   Hay problemas cr√≠ticos que deben resolverse.")
        print("   Consultar GUIA_RESOLUCION_PROBLEMAS.md")
    
    print(f"\nResultado: {exitosos}/{total} verificaciones exitosas")
    print("=" * 60)

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\nDiagn√≥stico interrumpido por el usuario.")
    except Exception as e:
        print(f"\nError inesperado durante el diagn√≥stico: {e}")
        print("Por favor reporte este error.")
